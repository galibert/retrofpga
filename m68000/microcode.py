from nmigen import *

class microcode(Elaboratable):
    def __init__(self):
        self.i_ma     = Signal(10)
        self.o_micro  = Signal(17)
        self.o_nano   = Signal(68)

        self.m_micro  = Memory(width = 17, depth = (34+1)*16, init = [
            0x12160, 0x10800, 0x052d0, 0x07cc0, 0x0800c, 0x0800c, 0x08480, 0x118e0, 0x08880, 0x10080, 0x10080, 0x08880, 0x01480, 0x10100, 0x10100, 0x0d300,
            0x00004, 0x01580, 0x07060, 0x04a4a, 0x0000c, 0x161a1, 0x0000c, 0x01d00, 0x06940, 0x046a0, 0x00480, 0x10c02, 0x07d80, 0x008e0, 0x05ea0, 0x12702,
            0x13a00, 0x00996, 0x05280, 0x161a1, 0x00004, 0x07c20, 0x12ea0, 0x08c20, 0x0af00, 0x1149a, 0x08ca1, 0x00cba, 0x098a0, 0x11497, 0x08021, 0x069c0,
            0x00460, 0x09421, 0x169c0, 0x036a0, 0x10004, 0x169c0, 0x00004, 0x01040, 0x008e6, 0x11ca1, 0x000f2, 0x090c0, 0x010a6, 0x11437, 0x001f2, 0x091c0,
            0x15201, 0x11041, 0x08004, 0x0987a, 0x00c40, 0x02c60, 0x03400, 0x161a1, 0x0f060, 0x03000, 0x00921, 0x00004, 0x00160, 0x00004, 0x022a0, 0x12e21,
            0x00460, 0x00004, 0x0f0e0, 0x036a0, 0x05a00, 0x08cba, 0x05a00, 0x11560, 0x0ac60, 0x03180, 0x0ac60, 0x11ce1, 0x00960, 0x08cba, 0x00960, 0x115e0,
            0x15201, 0x01156, 0x03ea0, 0x0db80, 0x00004, 0x17c20, 0x008e0, 0x11941, 0x00c40, 0x01c12, 0x04a16, 0x05a20, 0x000e0, 0x011e0, 0x04a1a, 0x069c0,
            0x00422, 0x01580, 0x00004, 0x05a80, 0x0a280, 0x08dc0, 0x00004, 0x000b2, 0x06940, 0x046a0, 0x10008, 0x0d680, 0x07d80, 0x008e0, 0x12a00, 0x0fca0,
            0x11941, 0x10502, 0x08540, 0x03f20, 0x14f01, 0x12582, 0x0e9c0, 0x02e80, 0x15701, 0x12502, 0x0e120, 0x00120, 0x14b21, 0x10582, 0x09540, 0x02e00,
            0x02216, 0x0e53a, 0x16880, 0x069c0, 0x08486, 0x0e5bb, 0x0f800, 0x05a20, 0x05251, 0x0b7e0, 0x0dec0, 0x04700, 0x07c30, 0x00000, 0x15ec0, 0x00000,
            0x01500, 0x15721, 0x0a621, 0x12a80, 0x00180, 0x17421, 0x0b280, 0x12a00, 0x05b60, 0x14721, 0x0bd00, 0x0e8e0, 0x057c0, 0x161a1, 0x0aaa1, 0x00000,
            0x07100, 0x0b600, 0x01120, 0x11941, 0x04300, 0x0b680, 0x011a0, 0x133a1, 0x00cba, 0x0b700, 0x001a0, 0x13a81, 0x00000, 0x00000, 0x00000, 0x00000,
            0x161a1, 0x03a20, 0x03a20, 0x0222e, 0x0b580, 0x0b2a0, 0x13aa0, 0x00004, 0x161a1, 0x06c00, 0x160e1, 0x160e1, 0x13a01, 0x0e9c0, 0x05b20, 0x13100,
            0x10004, 0x00004, 0x009c0, 0x009c0, 0x009c0, 0x018aa, 0x01016, 0x05280, 0x13100, 0x03720, 0x08880, 0x0800c, 0x13081, 0x137a0, 0x13fa1, 0x03080,
            0x07c40, 0x15721, 0x11500, 0x15721, 0x04680, 0x16061, 0x10180, 0x16161, 0x00000, 0x16161, 0x16da0, 0x143a1, 0x07880, 0x13b01, 0x17d20, 0x126a1,
            0x078a0, 0x15701, 0x15340, 0x15701, 0x00000, 0x13e21, 0x153c0, 0x13621, 0x00000, 0x126a1, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
            0x01500, 0x17c20, 0x10900, 0x07460, 0x00180, 0x13200, 0x10980, 0x074e0, 0x05b60, 0x11dc0, 0x15f40, 0x02900, 0x057c0, 0x16860, 0x15fc0, 0x02880,
            0x07100, 0x16960, 0x152a0, 0x05640, 0x04300, 0x11c80, 0x15e40, 0x056c0, 0x00cba, 0x17180, 0x13ba0, 0x07560, 0x00000, 0x156e0, 0x0c7a1, 0x075e0,
            0x04a00, 0x00816, 0x00004, 0x01c0e, 0x04200, 0x161a1, 0x04aca, 0x07060, 0x04b01, 0x13080, 0x0db00, 0x0000c, 0x0cb80, 0x0000c, 0x0187a, 0x0987a,
            0x15e01, 0x009c0, 0x15e01, 0x00004, 0x04e80, 0x01d60, 0x1a300, 0x0653a, 0x00004, 0x009c0, 0x00004, 0x161a1, 0x0cf81, 0x10004, 0x0f920, 0x0c321,
            0x00060, 0x114a1, 0x06d06, 0x00004, 0x04200, 0x17c20, 0x14e20, 0x07080, 0x10004, 0x05320, 0x05b20, 0x00004, 0x04ba0, 0x00004, 0x04ba0, 0x04ba0,
            0x14e20, 0x0d620, 0x0fc21, 0x14e20, 0x14e40, 0x17c20, 0x05e80, 0x0653a, 0x00004, 0x14721, 0x00004, 0x004e1, 0x14fa0, 0x00004, 0x05fa0, 0x05f60,
            0x04a40, 0x05216, 0x06420, 0x04620, 0x04ac0, 0x052e0, 0x057b0, 0x05e40, 0x02800, 0x169c1, 0x0e520, 0x161a1, 0x02980, 0x169a1, 0x0f1a0, 0x17da1,
            0x046a0, 0x04e20, 0x00d02, 0x17c20, 0x008e0, 0x06180, 0x00d82, 0x12380, 0x169c1, 0x10008, 0x0e120, 0x16940, 0x12ba1, 0x17c20, 0x0dbe0, 0x15740,
            0x05216, 0x114e1, 0x04206, 0x05a06, 0x052e0, 0x114e1, 0x06dc6, 0x05a86, 0x11941, 0x16940, 0x15b60, 0x0fc21, 0x14b21, 0x15740, 0x157c0, 0x0c321,
            0x0653a, 0x114a1, 0x16900, 0x169c1, 0x0e5ba, 0x114a1, 0x156a0, 0x169a1, 0x17921, 0x0df80, 0x08c81, 0x15fe0, 0x15781, 0x0c780, 0x0e921, 0x16000,
            0x13380, 0x06c00, 0x05e40, 0x17c20, 0x069c0, 0x11920, 0x00004, 0x06400, 0x008a6, 0x07c20, 0x07c20, 0x14ec0, 0x0e981, 0x0e920, 0x12a00, 0x16d00,
            0x06c00, 0x02c60, 0x00cba, 0x00cba, 0x069c0, 0x17480, 0x01d80, 0x00004, 0x161a1, 0x0f500, 0x0ac61, 0x17580, 0x161a0, 0x0428a, 0x0ac61, 0x0e120,
            0x009c0, 0x17021, 0x00004, 0x060a0, 0x0fc20, 0x170a1, 0x00004, 0x07060, 0x0fc20, 0x10004, 0x0f920, 0x08004, 0x00004, 0x0e9c0, 0x0f9a0, 0x0e520,
            0x09de0, 0x00004, 0x00004, 0x161a1, 0x00000, 0x00000, 0x00000, 0x0b300, 0x0f521, 0x0004a, 0x10004, 0x0e5a0, 0x0eda0, 0x0f5a1, 0x0fc20, 0x00004,
            0x119a7, 0x17841, 0x17841, 0x05a06, 0x11967, 0x178c1, 0x178c1, 0x05a86, 0x16940, 0x0fc20, 0x16940, 0x17921, 0x17d80, 0x08004, 0x17d80, 0x17121,
            0x17c00, 0x16481, 0x07c81, 0x07060, 0x15380, 0x16021, 0x05f20, 0x07170, 0x0653a, 0x0f540, 0x08c81, 0x08c80, 0x0e5ba, 0x0f5c0, 0x0e921, 0x0e921,
            0x053a0, 0x11920, 0x0e420, 0x161a1, 0x0041e, 0x0f000, 0x08140, 0x16081, 0x05ba0, 0x17400, 0x09440, 0x16c21, 0x00000, 0x00000, 0x00000, 0x00000,
            0x14f40, 0x00000, 0x12402, 0x14e01, 0x14fc0, 0x00000, 0x12482, 0x11ce1, 0x04660, 0x0424a, 0x12602, 0x115a1, 0x0c6e0, 0x042ca, 0x12682, 0x11521,
            0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000
            ])

        self.m_nano   = Memory(width = 68, depth = 94*4, init = [
            0x00001000000000000, 0x00001000000000000, 0x00001000000000000, 0x82500039810000000,
            0x92602005812218084, 0x92402401810140180, 0x0a101002802218004, 0x8a002008810000083,
            0x08002800000218084, 0x18b00c02260100682, 0x18980c02260100682, 0x0a002000800218084,
            0x8532200e508418425, 0x0008c400a01000002, 0x020062f894c018084, 0xc0828021100018044,
            0x00801000062000680, 0x8a002000810000000, 0x9240a401810140180, 0x00001000000210014,
            0x0008c400a01218046, 0x0004c800149000000, 0x9240a401812218004, 0x1a04c000900400000,
            0x8a001000810120048, 0x00111006000038044, 0x00001006200020048, 0x8b602205998000000,
            0x00821208100000345, 0x82002008810000001, 0x92402401858098004, 0x0c102a024085000c8,
            0x08006800000280080, 0x8a002001910418044, 0x0c101a0240a140080, 0x00300c56000000082,
            0x0000100000082002c, 0x18080000200104800, 0x50b000060441200ae, 0xc0828021100858044,
            0x8a002008810000083, 0x50b000060441200ca, 0x8360200d990000083, 0x84002800410400392,
            0x4088c000244100000, 0x18001038000280308, 0x8200200095808038a, 0x0a008c00802000000,
            0x8b022005810498010, 0x8c00280041028038a, 0x0830100e002024b45, 0x08106852140000800,
            0x00821200100080308, 0x82002008810000001, 0x04102802402000080, 0x8c002800550100048,
            0x4960685d18401c805, 0x42c0420194c018004, 0x00001000000030048, 0x820020089b8400083,
            0x00001000000820028, 0x01021208100420345, 0x4882284810001c804, 0xc0828021100018044,
            0x00421c00908298144, 0x08002850140000800, 0x00421c00948098144, 0x09022a00100200080,
            0x5888c020044004800, 0x02404601908018004, 0x5888c000244104800, 0x1cb01c00060000600,
            0x8a002000810498018, 0x00111006000038044, 0x0082100010081010c, 0x08106802140000800,
            0x00001008188420345, 0x08002800000000082, 0x82002008810000001, 0x8c002800410000000,
            0x00001000000400310, 0x00001000000030048, 0x00621002300850008, 0x0030000600041808a,
            0xc000e805084418030, 0x0200c400a01000002, 0x84002808410000083, 0x82006038810000000,
            0x00006800000000000, 0x08822800100000800, 0x000010080000000d7, 0x82002000958098086,
            0x0200c400a01218046, 0x0080ca00149000000, 0x8c422800598200082, 0x0844484100003c804,
            0x18001c00b40000048, 0x1a04ce00908400000, 0x0c622a00708000800, 0x0280ec00860140600,
            0x00001000000000000, 0x0a102c52a00000080, 0x08422800100200080, 0x003000060004080ae,
            0x0008c450a01000082, 0x8cc02a01558018044, 0x0a00820080a218084, 0x08002860100200082,
            0x0008c450a01000082, 0x1100160008a218004, 0x0200e20080a000080, 0x8c002800558010048,
            0x8c002800410000000, 0x00006800040180048, 0x00006800840080048, 0x84002800410038044,
            0x14601805400280080, 0x08002800000100180, 0x8b002400890500048, 0x000010080000204af,
            0x8d042800590200000, 0x00006860100200000, 0x10400421040190144, 0x10400421840090144,
            0x18001c00000210048, 0x0830600600003482c, 0x008212007008100ae, 0x1a004e01908200002,
            0x8b0024088905000cb, 0x008210081000004af, 0x020112002000200ae, 0x028312003000000ae,
            0x026312003000000ae, 0x00302c0600003800e, 0x00001000140010008, 0x00001002200820048,
            0x1a444e01908200002, 0x02004000800218004, 0x0c002800400000080, 0x9340060189a038084,
            0x1ac04e01948018086, 0x08c02a01048218086, 0x1868cc05200800000, 0x02404601908018086,
            0x82006038810000000, 0x18441c01b48000048, 0x1888c200248100082, 0x18441c01b08200048,
            0x0200c450a01000082, 0x8c002860510200082, 0x08422800100200080, 0x00001000000210014,
            0x00621000100018044, 0x00821000100058444, 0x000010086080204cb, 0x02011200200020048,
            0xc000e800000418010, 0x8c002800410200344, 0x00001005100018044, 0x430066f898c018004,
            0x8240a401910018004, 0x1a004e00808000082, 0x08102802000140100, 0x83002600898000080,
            0x0a908002862140600, 0x8300260089a038084, 0x02106c52800000002, 0x08926852100000800,
            0x1ac00c01b40000600, 0x05301406780000082, 0x18441c0114801804c, 0x8360220d998000083,
            0x41001430384058004, 0x020062a8808000000, 0x10601005000000002, 0x08302c56000000080,
            0x820020089b0400001, 0x028310003000000ae, 0x82002008810000083, 0x8d042840590018044,
            0x08002800148018844, 0x8b0024088900380a7, 0x08826a0010001c824, 0x9a000000958018844,
            0x01021000100410004, 0x8a422000910438044, 0x00001002200820048, 0x820020088b8400001,
            0x00001001100418018, 0x0a002000800000002, 0x12604e01908200002, 0x04011000288440400,
            0x8c0028084100380a7, 0x00001000188400082, 0x0283100030000002c, 0x83022208910400001,
            0x020112003804200ae, 0x83022008910400001, 0x0283120030000002c, 0x0263120030000002c,
            0x12604e05808000002, 0x4c822a00708000800, 0x18302006144000800, 0x12c04201848000002,
            0x92402401810000000, 0x09042800180200002, 0x8240a401810000002, 0x00302c56000000080,
            0x04b2120e7080180a7, 0x8c442801558000000, 0x820020089b0400083, 0x00086000200800000,
            0x8b002400990000000, 0x01601208188200083, 0x00001068000000000, 0x00080030000000000,
            0x00001005100018044, 0xc000e800000418010, 0x00001008000000001, 0x00441001100200000,
            0x00001000000410014, 0x18300c061401000ca, 0x08002800002001080, 0x8c0028005b0218044,
            0x0088c200248100000, 0x02004e00808000002, 0x0088c200248800000, 0x08302000200100002,
            0x18300c060002100ca, 0x8c002800590200082, 0x08822a00100098824, 0x18300c01348118046,
            0xc000e800000418018, 0x8a002000810000000, 0x00001002200820048, 0xc000e800000418050,
            0x19041c40b80000048, 0x18080c01348118046, 0x1888cc00240100002, 0x9a00200095a018844,
            0x08102852180200080, 0x1a101c62900200000, 0x1888c200248100000, 0x19340c461801000ca,
            0x1a00ee009480180c6, 0x0a822e00908080800, 0x0a008e0094a018844, 0x09022880100200080,
            0x080028f0180200080, 0x00806a60148000000, 0x04421a107082000e0, 0x09302400380100002,
            0x003000060004180d2, 0x08002801100200000, 0x82002008810038025, 0x00001040908000008,
            0x8204c040810000000, 0x8300a400990000002, 0x8300a400990000000, 0x08c02a01148018004,
            0x0c622800500000800, 0x1888c200248104800, 0x09042a00188200002, 0x18111c01300a38084,
            0x00002860100400000, 0x00001010000000060, 0x0204cc50900200002, 0x02000c50800000002,
            0x00300046100018086, 0x0800a860100200082, 0x84006801510210014, 0x84006810410000061,
            0x8a002000810000000, 0x0830200530011c844, 0x9a00200081003c824, 0x18111c00200a180c4,
            0x8b602205998000000, 0x00001000000000000, 0x92602000912204800, 0x0800280110043c424,
            0x00001040188000082, 0x18931e00b00058044, 0x01602a084008380a7, 0x00300c46100100008,
            0x9a00000081221c844, 0x18001c40900040008, 0x000028081a84380c7, 0x020062f894c018004,
            0x9a00200d910000801, 0x8b002408890000083, 0x0800680000003c824, 0x93002408892004801,
            0x00001008000000083, 0x08826800100004c2c, 0x08002800002002080, 0x09022800102201080,
            0x4c822ae850801c804, 0x000010080000380a7, 0x008212081000180a7, 0x8c002800410000000,
            0x00001000000000000, 0x00001000000000000, 0x00001000000000000, 0x8c302006410000080,
            0x9a00a000812002080, 0x01021000100410004, 0x8c002808490200083, 0x08822800102001800,
            0x08822800102002800, 0x0800280080a005000, 0x9a00a000852002800, 0x040112082000384a7,
            0x8c001800410010004, 0x188a0e20100018004, 0x188a0e00b08018004, 0xc000e8000488181c6,
            0x18080c00200a18046, 0x9a002008812004801, 0x1888cc00240a18046, 0x1a00ee008082180c6,
            0x08002860100200000, 0x18001c38000000000, 0x84002860510210005, 0x430066f098c018004,
            0x09142852180200080, 0x0a002e0080821c444, 0x0800280000003c824, 0x0a008e0080a218844,
            0x00001000608800082, 0x08442801100200000, 0x0800484010001c804, 0x8c002800410218044,
            0x09022800100200080, 0x00001000000000000, 0x1a04c000900400000, 0x1ac00c01b40000600,
            0x00001000000000000, 0x00001000000000000, 0x00001000000000000, 0x00001000000000000
            ])
            
    def elaborate(self, platform):
        m = Module()
        m.submodules.rmicro = rmicro = self.m_micro.read_port(domain = "eu_w")
        m.submodules.rnano  = rnano  = self.m_nano .read_port(domain = "eu_w")

        microidx = Signal(6)
        with m.Switch(self.i_ma[4:]):
            with m.Case(0x00):
                m.d.comb += microidx.eq(0x00)
            with m.Case(0x02):
                m.d.comb += microidx.eq(0x01)
            with m.Case(0x04):
                m.d.comb += microidx.eq(0x02)
            with m.Case(0x06):
                m.d.comb += microidx.eq(0x03)
            with m.Case(0x08):
                m.d.comb += microidx.eq(0x04)
            with m.Case(0x0a):
                m.d.comb += microidx.eq(0x05)
            with m.Case(0x0c):
                m.d.comb += microidx.eq(0x06)
            with m.Case(0x0e):
                m.d.comb += microidx.eq(0x07)
            with m.Case(0x10):
                m.d.comb += microidx.eq(0x08)
            with m.Case(0x11):
                m.d.comb += microidx.eq(0x09)
            with m.Case(0x12):
                m.d.comb += microidx.eq(0x0a)
            with m.Case(0x13):
                m.d.comb += microidx.eq(0x0b)
            with m.Case(0x15):
                m.d.comb += microidx.eq(0x0c)
            with m.Case(0x17):
                m.d.comb += microidx.eq(0x0d)
            with m.Case(0x1c):
                m.d.comb += microidx.eq(0x0e)
            with m.Case(0x1d):
                m.d.comb += microidx.eq(0x0f)
            with m.Case(0x1e):
                m.d.comb += microidx.eq(0x10)
            with m.Case(0x1f):
                m.d.comb += microidx.eq(0x11)
            with m.Case(0x21):
                m.d.comb += microidx.eq(0x12)
            with m.Case(0x23):
                m.d.comb += microidx.eq(0x13)
            with m.Case(0x25):
                m.d.comb += microidx.eq(0x14)
            with m.Case(0x27):
                m.d.comb += microidx.eq(0x15)
            with m.Case(0x29):
                m.d.comb += microidx.eq(0x16)
            with m.Case(0x2b):
                m.d.comb += microidx.eq(0x17)
            with m.Case(0x2d):
                m.d.comb += microidx.eq(0x18)
            with m.Case(0x2f):
                m.d.comb += microidx.eq(0x19)
            with m.Case(0x30):
                m.d.comb += microidx.eq(0x1a)
            with m.Case(0x32):
                m.d.comb += microidx.eq(0x1b)
            with m.Case(0x34):
                m.d.comb += microidx.eq(0x1c)
            with m.Case(0x36):
                m.d.comb += microidx.eq(0x1d)
            with m.Case(0x38):
                m.d.comb += microidx.eq(0x1e)
            with m.Case(0x3a):
                m.d.comb += microidx.eq(0x1f)
            with m.Case(0x3c):
                m.d.comb += microidx.eq(0x20)
            with m.Case(0x3e):
                m.d.comb += microidx.eq(0x21)
            with m.Default():
                m.d.comb += microidx.eq(0x22)

        m.d.eu_r += rmicro.addr.eq(Cat(self.i_ma[:4], microidx))
        m.d.comb += self.o_micro.eq(rmicro.data)

        nanoidx = Signal(7)
        with m.Switch(self.i_ma[2:]):
            with m.Case("00000000"):
                m.d.comb += nanoidx.eq(0x00)
            with m.Case("00000001"):
                m.d.comb += nanoidx.eq(0x01)
            with m.Case("0000001-"):
                m.d.comb += nanoidx.eq(0x02)
            with m.Case("00001000"):
                m.d.comb += nanoidx.eq(0x03)
            with m.Case("00001001"):
                m.d.comb += nanoidx.eq(0x04)
            with m.Case("0000101-"):
                m.d.comb += nanoidx.eq(0x05)
            with m.Case("00010000"):
                m.d.comb += nanoidx.eq(0x06)
            with m.Case("00010001"):
                m.d.comb += nanoidx.eq(0x07)
            with m.Case("0001001-"):
                m.d.comb += nanoidx.eq(0x08)
            with m.Case("00011000"):
                m.d.comb += nanoidx.eq(0x09)
            with m.Case("00011001"):
                m.d.comb += nanoidx.eq(0x0a)
            with m.Case("0001101-"):
                m.d.comb += nanoidx.eq(0x0b)
            with m.Case("00100000"):
                m.d.comb += nanoidx.eq(0x0c)
            with m.Case("001000-1"):
                m.d.comb += nanoidx.eq(0x0d)
            with m.Case("00100010"):
                m.d.comb += nanoidx.eq(0x0e)
            with m.Case("00101000"):
                m.d.comb += nanoidx.eq(0x0f)
            with m.Case("001010-1"):
                m.d.comb += nanoidx.eq(0x10)
            with m.Case("00101010"):
                m.d.comb += nanoidx.eq(0x11)
            with m.Case("00110000"):
                m.d.comb += nanoidx.eq(0x12)
            with m.Case("00110001"):
                m.d.comb += nanoidx.eq(0x13)
            with m.Case("0011001-"):
                m.d.comb += nanoidx.eq(0x14)
            with m.Case("00111000"):
                m.d.comb += nanoidx.eq(0x15)
            with m.Case("00111001"):
                m.d.comb += nanoidx.eq(0x16)
            with m.Case("0011101-"):
                m.d.comb += nanoidx.eq(0x17)
            with m.Case("010000--"):
                m.d.comb += nanoidx.eq(0x18)
            with m.Case("010001--"):
                m.d.comb += nanoidx.eq(0x19)
            with m.Case("010010--"):
                m.d.comb += nanoidx.eq(0x1a)
            with m.Case("010011--"):
                m.d.comb += nanoidx.eq(0x1b)
            with m.Case("01010100"):
                m.d.comb += nanoidx.eq(0x1c)
            with m.Case("01010101"):
                m.d.comb += nanoidx.eq(0x1d)
            with m.Case("01010110"):
                m.d.comb += nanoidx.eq(0x1e)
            with m.Case("01010111"):
                m.d.comb += nanoidx.eq(0x1f)
            with m.Case("01011100"):
                m.d.comb += nanoidx.eq(0x20)
            with m.Case("01011101"):
                m.d.comb += nanoidx.eq(0x21)
            with m.Case("01011110"):
                m.d.comb += nanoidx.eq(0x22)
            with m.Case("01011111"):
                m.d.comb += nanoidx.eq(0x23)
            with m.Case("01110---"):
                m.d.comb += nanoidx.eq(0x24)
            with m.Case("01111---"):
                m.d.comb += nanoidx.eq(0x25)
            with m.Case("10000100"):
                m.d.comb += nanoidx.eq(0x26)
            with m.Case("10000101"):
                m.d.comb += nanoidx.eq(0x27)
            with m.Case("10000110"):
                m.d.comb += nanoidx.eq(0x28)
            with m.Case("10000111"):
                m.d.comb += nanoidx.eq(0x29)
            with m.Case("10001100"):
                m.d.comb += nanoidx.eq(0x2a)
            with m.Case("10001101"):
                m.d.comb += nanoidx.eq(0x2b)
            with m.Case("10001110"):
                m.d.comb += nanoidx.eq(0x2c)
            with m.Case("10001111"):
                m.d.comb += nanoidx.eq(0x2d)
            with m.Case("10010100"):
                m.d.comb += nanoidx.eq(0x2e)
            with m.Case("10010101"):
                m.d.comb += nanoidx.eq(0x2f)
            with m.Case("10010110"):
                m.d.comb += nanoidx.eq(0x30)
            with m.Case("10010111"):
                m.d.comb += nanoidx.eq(0x31)
            with m.Case("10011100"):
                m.d.comb += nanoidx.eq(0x32)
            with m.Case("10011101"):
                m.d.comb += nanoidx.eq(0x33)
            with m.Case("10011110"):
                m.d.comb += nanoidx.eq(0x34)
            with m.Case("10011111"):
                m.d.comb += nanoidx.eq(0x35)
            with m.Case("1010010-"):
                m.d.comb += nanoidx.eq(0x36)
            with m.Case("1010011-"):
                m.d.comb += nanoidx.eq(0x37)
            with m.Case("1010110-"):
                m.d.comb += nanoidx.eq(0x38)
            with m.Case("1010111-"):
                m.d.comb += nanoidx.eq(0x39)
            with m.Case("1011010-"):
                m.d.comb += nanoidx.eq(0x3a)
            with m.Case("1011011-"):
                m.d.comb += nanoidx.eq(0x3b)
            with m.Case("1011110-"):
                m.d.comb += nanoidx.eq(0x3c)
            with m.Case("1011111-"):
                m.d.comb += nanoidx.eq(0x3d)
            with m.Case("11000000"):
                m.d.comb += nanoidx.eq(0x3e)
            with m.Case("11000001"):
                m.d.comb += nanoidx.eq(0x3f)
            with m.Case("11000010"):
                m.d.comb += nanoidx.eq(0x40)
            with m.Case("11000011"):
                m.d.comb += nanoidx.eq(0x41)
            with m.Case("11001000"):
                m.d.comb += nanoidx.eq(0x42)
            with m.Case("11001001"):
                m.d.comb += nanoidx.eq(0x43)
            with m.Case("11001010"):
                m.d.comb += nanoidx.eq(0x44)
            with m.Case("11001011"):
                m.d.comb += nanoidx.eq(0x45)
            with m.Case("11010000"):
                m.d.comb += nanoidx.eq(0x46)
            with m.Case("11010001"):
                m.d.comb += nanoidx.eq(0x47)
            with m.Case("11010010"):
                m.d.comb += nanoidx.eq(0x48)
            with m.Case("11010011"):
                m.d.comb += nanoidx.eq(0x49)
            with m.Case("11011000"):
                m.d.comb += nanoidx.eq(0x4a)
            with m.Case("11011001"):
                m.d.comb += nanoidx.eq(0x4b)
            with m.Case("11011010"):
                m.d.comb += nanoidx.eq(0x4c)
            with m.Case("11011011"):
                m.d.comb += nanoidx.eq(0x4d)
            with m.Case("1110000-"):
                m.d.comb += nanoidx.eq(0x4e)
            with m.Case("1110001-"):
                m.d.comb += nanoidx.eq(0x4f)
            with m.Case("1110100-"):
                m.d.comb += nanoidx.eq(0x50)
            with m.Case("1110101-"):
                m.d.comb += nanoidx.eq(0x51)
            with m.Case("111100--"):
                m.d.comb += nanoidx.eq(0x52)
            with m.Case("111110--"):
                m.d.comb += nanoidx.eq(0x53)
            with m.Default():
                m.d.comb += nanoidx.eq(0x54)

        m.d.eu_r += rnano.addr.eq(Cat(self.i_ma[:2], nanoidx))
        m.d.comb += self.o_nano.eq(rnano.data)

        return m
